import streamlit as st
import pandas as pd
import json
import os

st.set_page_config(layout="wide", page_title="S2ST Dashboard")

# --- Helper Functions ---
def load_json(path):
    if os.path.exists(path):
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            return None
    return None

# --- Paths ---
RESULTS_DIR = '../results/'
DATA_DIR = '../data/'
METRICS_PATH = os.path.join(RESULTS_DIR, 'metrics.json')
HISTORY_PATH = os.path.join(RESULTS_DIR, 'history.json')

# --- Main Dashboard ---
st.title("üìä B·∫£ng ƒêi·ªÅu Khi·ªÉn D·ª± √Ån S2ST")
st.markdown("Tr·ª±c quan h√≥a k·∫øt qu·∫£ hu·∫•n luy·ªán v√† nghe c√°c m·∫´u d·ªãch.")

# --- Tab Layout ---
tab1, tab2 = st.tabs(["üìà K·∫øt Qu·∫£ Hu·∫•n Luy·ªán", "üéß Nghe M·∫´u D·ªãch"])

with tab1:
    st.header("Ch·ªâ S·ªë ƒê√°nh Gi√° M√¥ H√¨nh")
    metrics = load_json(METRICS_PATH)
    if metrics:
        col1, col2, col3 = st.columns(3)
        col1.metric("BLEU Score", f"{metrics.get('BLEU', 'N/A')}")
        col2.metric("Mean Opinion Score (MOS)", f"{metrics.get('MOS', 'N/A')}")
        col3.metric("F0 Correlation", f"{metrics.get('F0_corr', 'N/A')}")

        st.subheader("L·ªãch s·ª≠ BLEU Score (d·ªØ li·ªáu gi·∫£)")
        chart_data = pd.DataFrame({
            'epoch': range(1, 11),
            'BLEU': [10, 12, 15, 18, 20, 22, 24, 25, 25.2, 25.5]
        })
        st.line_chart(chart_data.rename(columns={'epoch':'index'}).set_index('index'))
    else:
        st.warning(f"Kh√¥ng t√¨m th·∫•y file `results/metrics.json`. H√£y ch·∫°y k·ªãch b·∫£n hu·∫•n luy·ªán ƒë·ªÉ t·∫°o file n√†y.")

with tab2:
    st.header("L·ªãch S·ª≠ D·ªãch v√† Nghe L·∫°i")
    history = load_json(HISTORY_PATH)
    
    if history:
        df = pd.DataFrame(history)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df = df.sort_values(by='timestamp', ascending=False)
        st.dataframe(df)

        st.subheader("Ch·ªçn m·ªôt m·∫´u ƒë·ªÉ nghe")
        
        # Create a display label for the selectbox
        df['display_label'] = df['input_filename'] + " ‚Üí " + df['output_filename']
        selected_label = st.selectbox("Ch·ªçn b·∫£n d·ªãch:", df['display_label'])
        
        selected_row = df[df['display_label'] == selected_label].iloc[0]
        
        output_audio_path = os.path.join(RESULTS_DIR, selected_row['output_filename'])
        input_audio_path = os.path.join(DATA_DIR, 'en', selected_row['input_filename']) # Assumes input is in data/en

        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### √Çm thanh G·ªëc (English)")
            if os.path.exists(input_audio_path):
                st.audio(input_audio_path)
            else:
                st.error(f"Kh√¥ng t√¨m th·∫•y file √¢m thanh g·ªëc: `{input_audio_path}`")
        
        with col2:
            st.markdown("#### √Çm thanh ƒê√£ D·ªãch (Vietnamese)")
            if os.path.exists(output_audio_path):
                st.audio(output_audio_path)
            else:
                st.error(f"Kh√¥ng t√¨m th·∫•y file √¢m thanh ƒë√£ d·ªãch: `{output_audio_path}`")
    else:
        st.info("Kh√¥ng c√≥ l·ªãch s·ª≠ d·ªãch n√†o. H√£y s·ª≠ d·ª•ng WebApp ƒë·ªÉ d·ªãch m·ªôt file √¢m thanh.")